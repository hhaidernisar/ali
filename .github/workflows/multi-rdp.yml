name: Multi-RDP

on:
  workflow_dispatch:
    inputs:
      instance_count:
        description: 'Number of RDP instances to create'
        required: true
        default: '5'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    strategy:
      matrix:
        instance: [1, 2, 3, 4, 5]
      fail-fast: false
      max-parallel: 5

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing firewall rule and open RDP port
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force
          Write-Host "✅ RDP configured successfully"

      - name: Create RDP User
        run: |
          $username = "RDP"
          $password = "Khizar@123"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name $username -Force
              Write-Host "Existing user removed"
          }

          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username

          Write-Host "✅ User '$username' created successfully"

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "✅ Tailscale installed successfully"

      - name: Connect to Tailscale
        run: |
          $hostname = "rdp-instance-${{ matrix.instance }}-run-${{ github.run_number }}"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              Start-Sleep -Seconds 3
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              $retries++
          }
          if (-not $tsIP) { Write-Error "Failed to get Tailscale IP"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "HOSTNAME=$hostname" >> $env:GITHUB_ENV
          Write-Host "✅ Tailscale connected successfully"

      - name: Verify RDP Connection
        run: |
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if ($test.TcpTestSucceeded) {
              Write-Host "✅ RDP port is accessible"
          } else {
              Write-Warning "⚠️ RDP port test failed, continuing..."
          }

      # 🆕 Install and Launch Perplexity Comet Browser
      - name: Install and Launch Perplexity Comet Browser
        run: |
          $ErrorActionPreference = 'Continue'
          Write-Host "🔄 Downloading Perplexity Comet Browser installer..."

          # Stable CDN mirror to avoid DNS failure
          $urls = @(
            "https://download.perplexity.ai/comet/CometSetup.exe",
            "https://dl.comet.perplexity.ai/CometSetup.exe",
            "https://perplexity-comet-installer.vercel.app/CometSetup.exe"
          )

          $installer = "$env:TEMP\CometSetup.exe"
          $downloaded = $false

          foreach ($u in $urls) {
              try {
                  Write-Host "Attempting: $u"
                  Invoke-WebRequest -Uri $u -OutFile $installer -UseBasicParsing -TimeoutSec 30
                  $downloaded = $true
                  break
              } catch {
                  Write-Warning "Failed to download from $u"
              }
          }

          if (-not $downloaded) {
              Write-Error "❌ All Comet download URLs failed."
              exit 1
          }

          Write-Host "🚀 Installing Comet Browser..."
          try {
              Start-Process -FilePath $installer -ArgumentList "/S" -Wait
              Remove-Item $installer -Force
          } catch {
              Write-Error "❌ Installation failed."
              exit 1
          }

          # Expected install path
          $cometPath = "C:\Users\RDP\AppData\Local\Programs\PerplexityComet\Comet.exe"

          Write-Host "📁 Adding Comet to startup..."
          $startup = "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\Comet.lnk"
          $shell = New-Object -ComObject WScript.Shell
          $shortcut = $shell.CreateShortcut($startup)
          $shortcut.TargetPath = $cometPath
          $shortcut.Save()

          Write-Host "🌐 Launching Comet Browser..."
          if (Test-Path $cometPath) {
              Start-Process $cometPath
              Write-Host "✅ Perplexity Comet Browser installed and launched successfully."
          } else {
              Write-Error "❌ Comet executable not found. Check installation path."
              exit 1
          }

      - name: Keep Instance Running
        run: |
          Write-Host ""
          Write-Host "═══════════════════════════════════════════════"
          Write-Host "  RDP INSTANCE ${{ matrix.instance }} - READY"
          Write-Host "═══════════════════════════════════════════════"
          Write-Host "  Hostname : $env:HOSTNAME"
          Write-Host "  IP Address : $env:TAILSCALE_IP"
          Write-Host "  Username : RDP"
          Write-Host "  Password : Khizar@123"
          Write-Host "═══════════════════════════════════════════════"
          Write-Host ""
          $count = 0
          while ($true) {
              $count++
              $time = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              Write-Host "[$time] Instance ${{ matrix.instance }} Active (Heartbeat #$count)"
              Start-Sleep -Seconds 300
          }
