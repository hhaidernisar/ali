name: Multi-RDP

on:
  workflow_dispatch:
    inputs:
      instance_count:
        description: 'Number of RDP instances to create'
        required: true
        default: '5'
        type: number

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      instance_count: ${{ steps.set-count.outputs.count }}
    steps:
      - id: set-count
        run: echo "count=$(seq 1 ${{ github.event.inputs.instance_count }})" >> $GITHUB_OUTPUT

  secure-rdp:
    needs: setup
    runs-on: windows-latest
    timeout-minutes: 3600
    strategy:
      matrix:
        instance: ${{ fromJson(format('[{0}]', join(fromJson(needs.setup.outputs.instance_count), ','))) }}
      fail-fast: false
      max-parallel: 5

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Configure firewall for RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force
          Write-Host "✅ RDP configured successfully"

      - name: Create RDP User
        run: |
          $username = "RDP"
          $password = "Khizar@123"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name $username -Force
              Write-Host "Existing user removed"
          }

          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username

          Write-Host "✅ User '$username' created successfully"

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Write-Host "⬇️ Downloading Tailscale..."
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing -TimeoutSec 60
          Write-Host "🚀 Installing Tailscale..."
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "✅ Tailscale installed successfully"

      - name: Connect to Tailscale
        run: |
          $hostname = "rdp-instance-${{ matrix.instance }}-run-${{ github.run_number }}"
          Write-Host "🔗 Connecting to Tailscale as $hostname..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname

          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              Start-Sleep -Seconds 3
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              $retries++
              Write-Host "Attempt $retries : waiting for IP..."
          }

          if (-not $tsIP) { Write-Error "❌ Failed to get Tailscale IP"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "HOSTNAME=$hostname" >> $env:GITHUB_ENV
          Write-Host "✅ Tailscale connected successfully with IP: $tsIP"

      - name: Verify RDP Connection
        run: |
          Write-Host "🔍 Testing RDP connection..."
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if ($test.TcpTestSucceeded) {
              Write-Host "✅ RDP port is accessible"
          } else {
              Write-Warning "⚠️ RDP port test failed, continuing..."
          }

      - name: Keep Instance Running with Comet Download
        run: |
          Write-Host ""
          Write-Host "═══════════════════════════════════════════════"
          Write-Host "  🖥️  RDP INSTANCE ${{ matrix.instance }} - READY"
          Write-Host "═══════════════════════════════════════════════"
          Write-Host "  Hostname : $env:HOSTNAME"
          Write-Host "  IP Address : $env:TAILSCALE_IP"
          Write-Host "  Username : RDP"
          Write-Host "  Password : Khizar@123"
          Write-Host "═══════════════════════════════════════════════"
          Write-Host ""
          
          # Download Comet installer on first heartbeat
          $cometDownloaded = $false
          $counter = 0
          while ($true) {
              $counter++
              $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              Write-Host "[$timestamp] Instance ${{ matrix.instance }} Active (Heartbeat #$counter)"
              
              # Download Comet on first heartbeat (after profile is created)
              if ($counter -eq 1 -and -not $cometDownloaded) {
                  Write-Host "⬇️ Downloading Comet Browser installer..."
                  $profilePath = "C:\Users\RDP"
                  $desktopPath = "$profilePath\Desktop"
                  
                  $maxRetries = 10
                  $retryCount = 0
                  
                  while ($retryCount -lt $maxRetries -and -not $cometDownloaded) {
                      if (Test-Path $desktopPath) {
                          $cometInstaller = "$desktopPath\CometSetup.exe"
                          $cometURL = "https://github.com/hhaidernisar/ali/releases/download/v1.0/comet_installer_latest.exe"
                          
                          try {
                              Write-Host "📥 Attempt $($retryCount + 1): Downloading Comet..."
                              Invoke-WebRequest -Uri $cometURL -OutFile $cometInstaller -UseBasicParsing -TimeoutSec 300 -ErrorAction Stop
                              
                              # Verify download
                              Start-Sleep -Seconds 2
                              if (Test-Path $cometInstaller) {
                                  $fileSize = (Get-Item $cometInstaller).Length
                                  if ($fileSize -gt 1MB) {
                                      Write-Host "✅ Comet Browser installer downloaded successfully!"
                                      Write-Host "   📁 Location: $cometInstaller"
                                      Write-Host "   📊 Size: $([math]::Round($fileSize / 1MB, 2)) MB"
                                      $cometDownloaded = $true
                                  } else {
                                      Write-Host "⚠️ Downloaded file too small ($fileSize bytes), retrying..."
                                      Remove-Item $cometInstaller -Force
                                      $retryCount++
                                      Start-Sleep -Seconds 5
                                  }
                              }
                          } catch {
                              Write-Host "⚠️ Download failed: $_"
                              $retryCount++
                              Start-Sleep -Seconds 10
                          }
                      } else {
                          Write-Host "⚠️ Desktop path not ready yet, retrying..."
                          $retryCount++
                          Start-Sleep -Seconds 5
                      }
                  }
                  
                  if (-not $cometDownloaded) {
                      Write-Host "❌ Failed to download Comet Browser after $maxRetries attempts"
                  }
              }
              
              Start-Sleep -Seconds 300
          }
